package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/especial") // This means URL's start with /demo (after Application path)
public class EspecialidadController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EspecialidadRepository especialidadRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewEspecialidad(@RequestParam long idEspecialidad,
             @RequestParam String descripEspecialidad) {
        if (especialidadRepository.exists(idEspecialidad)) {
            return "Registro ya existe";
        } else {

            Especialidad e = new Especialidad();
            e.setIdEspecialidad(idEspecialidad);
            e.setDescripEspecialidad(descripEspecialidad);
            especialidadRepository.save(e);
            return "Salvado";
        }
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Especialidad> getAllEspecialidades() {
        // This returns a JSON or XML with the users
        return especialidadRepository.findAll();
    }

    @GetMapping(path = "/delete")
    public @ResponseBody
    String deleteEspecialidad(@RequestParam long idEspecialidad) {

        if (!especialidadRepository.exists(idEspecialidad)) {
            return "No hay registro";
        } else {
            Especialidad e = especialidadRepository.findOne(idEspecialidad);
            especialidadRepository.delete(e);
            return "Borrado";
        }
    }

    @GetMapping(path = "/update")
    public @ResponseBody
    String updateEspecialidad(@RequestParam long idEspecialidad, @RequestParam String descripEspecialidad) {
        if (!especialidadRepository.exists(idEspecialidad)) {
            return "No hay registro";
        } else {
            Especialidad e = especialidadRepository.findOne(idEspecialidad);
            e.setDescripEspecialidad(descripEspecialidad);
            especialidadRepository.save(e);
            return "Actualizado";
        }
    }
}
